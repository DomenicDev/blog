<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Domenic Cassisi, Author at Domenic Cassisi</title>
	<atom:link href="/author/domenic/feed/" rel="self" type="application/rss+xml" />
	<link>/author/domenic/</link>
	<description>Personal Blog</description>
	<lastBuildDate>Fri, 14 Oct 2022 08:11:18 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.1.1</generator>

<image>
	<url>/wp-content/uploads/2022/09/cropped-favicon-32x32.jpg</url>
	<title>Domenic Cassisi, Author at Domenic Cassisi</title>
	<link>/author/domenic/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Functional Programming + Event Sourcing = A Good Idea?</title>
		<link>/2022/10/13/functional-programming-event-sourcing-a-good-idea/</link>
		
		<dc:creator><![CDATA[Domenic Cassisi]]></dc:creator>
		<pubDate>Thu, 13 Oct 2022 21:18:22 +0000</pubDate>
				<category><![CDATA[Event Sourcing]]></category>
		<guid isPermaLink="false">/?p=261</guid>

					<description><![CDATA[<p>Functional programming is a popular programming paradigm that lives side-by-side with object-oriented programming. Functions and immutable data structures are core concepts that play an important role in this blog post. In my previous post, I described how we can build an event-sourced domain model by applying domain-driven design (DDD) and its tactical patterns, of which [&#8230;]</p>
<p>The post <a rel="nofollow" href="/2022/10/13/functional-programming-event-sourcing-a-good-idea/">Functional Programming + Event Sourcing = A Good Idea?</a> appeared first on <a rel="nofollow" href="/">Domenic Cassisi</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>Functional programming is a popular programming paradigm that lives side-by-side with object-oriented programming. Functions and immutable data structures are core concepts that play an important role in this blog post. In my <a href="/2022/09/25/how-to-build-an-event-sourced-domain-model-a-practical-introduction/">previous post</a>, I described how we can build an event-sourced domain model by applying domain-driven design (DDD) and its tactical patterns, of which many but not all are object-oriented. In this blog post, however, we will aim to build the same event-sourced domain model using a functional approach. It should be noted that the strategic patterns from DDD can still be used to elaborate a domain model, regardless of which implementation approach (e.g. DDD&#8217;s tactical patterns or functional approach) is used. </p>



<h2>Recap on the domain</h2>



<p>Let&#8217;s start by briefly describing the domain used in this blog post. Similar to the previous blog post, we are in the context of a library domain, in which you can borrow books, return books, make a reservation, and so on.</p>



<p>Once a book is registered, it is available for lending. A book can only be lent to one reader at a time. After a reader finishes reading the book, the book is returned and made available again. A book can only be reserved if it is currently borrowed.  Reservations can be cleared regardless of whether the book is borrowed or not. Of course, there are way more states in a real application, but the model described will be sufficient for the purpose of this blog post.  </p>



<p>Given the description above, we can visualize a book&#8217;s lifecycle using a state machine. The following state machine diagram illustrates the states and transitions of the book scenario provided. We will come back to the illustration as we start implementing the domain model. </p>



<figure class="wp-block-image aligncenter size-full"><img decoding="async" width="672" height="231" src="/wp-content/uploads/2022/10/state-machine.png" alt="" class="wp-image-263" srcset="/wp-content/uploads/2022/10/state-machine.png 672w, /wp-content/uploads/2022/10/state-machine-480x165.png 480w" sizes="(min-width: 0px) and (max-width: 480px) 480px, (min-width: 481px) 672px, 100vw" /><figcaption>State machine diagram for a book lifecycle</figcaption></figure>



<h2>Events as the Source of Truth</h2>



<p>In order to build an event-sourced domain model, we have to build the application state entirely from domain events. Luckily, the previous state machine diagram already contains the events for our book entity. Each transition is triggered by the occurrence of a specific event, that is, we can map each transition to a specific event type.</p>



<p>How does this look like in code? The following code snippets present code written in Kotlin, which comes with good support for functional programming. In the case you use a different language, don&#8217;t worry, the code should look more or less similar to other popular programming languages.  </p>



<p>For each type of event, we define a data structure that contains all the necessary information about that specific event. We also define a <code>sealed interface</code> in order to be more explicit and group those events. The main advantage of a sealed interface is that we later can do an exhaustive pattern match, and there are no other events defined outside the module. Kotlin&#8217;s <code>data class</code> helps us to define immutable data structures.</p>



<div class="wp-block-kevinbatdorf-code-block-pro" style="font-size:1rem;line-height:1.5rem"><span style="display:block;padding:16px 0 0 16px;margin-bottom:-1px;width:100%;text-align:left;background-color:#2e3440ff"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></span><span role="button" tabindex="0" data-code="sealed interface BookEvent

data class BookRegistered(
    val bookId: BookId,
): BookEvent

data class BookBorrowed(
    val bookId: BookId,
    val readerId: ReaderId,
    val loanId: LoanId,
    val loanDate: LocalDate,
    val loanEndDate: LocalDate
): BookEvent

data class ReservationCleared(
    val bookId: BookId
): BookEvent

data class BookReturned(
    val bookId: BookId,
    val loanId: LoanId,
    val returnDate: LocalDate
): BookEvent

data class BookReserved(
    val bookId: BookId,
    val readerId: ReaderId,
    val reservedAt: LocalDate,
    val expiresAt: LocalDate
): BookEvent" style="color:#d8dee9ff;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki" style="background-color: #2e3440ff"><code><span class="line"><span style="color: #81A1C1">sealed</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">interface</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookEvent</span></span>
<span class="line"></span>
<span class="line"><span style="color: #81A1C1">data</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">class</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookRegistered</span><span style="color: #ECEFF4">(</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">bookId</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #ECEFF4">)</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB; font-style: italic">BookEvent</span></span>
<span class="line"></span>
<span class="line"><span style="color: #81A1C1">data</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">class</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookBorrowed</span><span style="color: #ECEFF4">(</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">bookId</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">readerId</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ReaderId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">loanId</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">LoanId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">loanDate</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">LocalDate</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">loanEndDate</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">LocalDate</span></span>
<span class="line"><span style="color: #ECEFF4">)</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB; font-style: italic">BookEvent</span></span>
<span class="line"></span>
<span class="line"><span style="color: #81A1C1">data</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">class</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ReservationCleared</span><span style="color: #ECEFF4">(</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">bookId</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookId</span></span>
<span class="line"><span style="color: #ECEFF4">)</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB; font-style: italic">BookEvent</span></span>
<span class="line"></span>
<span class="line"><span style="color: #81A1C1">data</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">class</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookReturned</span><span style="color: #ECEFF4">(</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">bookId</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">loanId</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">LoanId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">returnDate</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">LocalDate</span></span>
<span class="line"><span style="color: #ECEFF4">)</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB; font-style: italic">BookEvent</span></span>
<span class="line"></span>
<span class="line"><span style="color: #81A1C1">data</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">class</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookReserved</span><span style="color: #ECEFF4">(</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">bookId</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">readerId</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ReaderId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">reservedAt</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">LocalDate</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">expiresAt</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">LocalDate</span></span>
<span class="line"><span style="color: #ECEFF4">)</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB; font-style: italic">BookEvent</span></span></code></pre></div>



<p>Now that we have defined all events, let&#8217;s explore how we can build the book entity from those events using a functional approach.</p>



<h2>Building a Functional Domain Model</h2>



<p>Functions and immutability do both match with event sourcing. Greg Young, who coined the notion of event sourcing, emphasized that event sourcing is a purely functional model. Hence, the motivation of this post is that we at least should consider embracing the idea of immutability in our event-sourced domain model.</p>



<p>The first step to implementing our event-sourced domain model is to define the book entity itself. Similar to the approach used for events, we can also use a data class with <code>val</code>s to ensure immutability, as shown in the following code snippet:  </p>



<div class="wp-block-kevinbatdorf-code-block-pro" style="font-size:1rem;line-height:1.5rem"><span style="display:block;padding:16px 0 0 16px;margin-bottom:-1px;width:100%;text-align:left;background-color:#2e3440ff"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></span><span role="button" tabindex="0" data-code="// THE BOOK ENTITY
data class Book(
    val bookId: BookId,
    val loan: Loan,
    val reservation: Reservation,
    val state: BookState,
) " style="color:#d8dee9ff;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki" style="background-color: #2e3440ff"><code><span class="line"><span style="color: #616E88">// THE BOOK ENTITY</span></span>
<span class="line"><span style="color: #81A1C1">data</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">class</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Book</span><span style="color: #ECEFF4">(</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">bookId</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">loan</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Loan</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">reservation</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Reservation</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">state</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookState</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #ECEFF4">)</span><span style="color: #D8DEE9FF"> </span></span></code></pre></div>



<p>Loan and Reservation are two self-defined types for implementing the concept of a loan and reservation. The following code snippet shows the implementation of a Loan. The implementation also makes use of sealed interfaces, as a loan can be in different states. Furthermore, this approach avoids working with null values. </p>



<div class="wp-block-kevinbatdorf-code-block-pro" style="font-size:1rem;line-height:1.5rem"><span style="display:block;padding:16px 0 0 16px;margin-bottom:-1px;width:100%;text-align:left;background-color:#2e3440ff"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></span><span role="button" tabindex="0" data-code="sealed interface Loan

object AvailableForLoan : Loan

data class ActiveLoan (
    val loanId: LoanId,
    val readerId: ReaderId,
    val startDate: LocalDate,
    val endDate: LocalDate,
    val extensions: Int
): Loan" style="color:#d8dee9ff;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki" style="background-color: #2e3440ff"><code><span class="line"><span style="color: #81A1C1">sealed</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">interface</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Loan</span></span>
<span class="line"></span>
<span class="line"><span style="color: #81A1C1">object</span><span style="color: #D8DEE9FF"> AvailableForLoan </span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB; font-style: italic">Loan</span></span>
<span class="line"></span>
<span class="line"><span style="color: #81A1C1">data</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">class</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ActiveLoan</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">(</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">loanId</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">LoanId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">readerId</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ReaderId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">startDate</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">LocalDate</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">endDate</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">LocalDate</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">extensions</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Int</span></span>
<span class="line"><span style="color: #ECEFF4">)</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB; font-style: italic">Loan</span></span></code></pre></div>



<p>The implementation is completely immutable, that is, for changing the state of a book, a new object has to be created. Kotlin&#8217;s data class comes with a <code>copy()</code> function that simplifies creating new objects from a previous state. You will see what this looks like in the next code snippet.</p>



<p>In order to build book entities solely from events, we define an <code>apply()</code> function that takes an event and the current state. The <code>apply()</code> function then builds the new current state of the book entity and returns it, as shown in the following code snippet.</p>



<div class="wp-block-kevinbatdorf-code-block-pro" style="font-size:1rem;line-height:1.5rem"><span style="display:block;padding:16px 0 0 16px;margin-bottom:-1px;width:100%;text-align:left;background-color:#2e3440ff"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></span><span role="button" tabindex="0" data-code="data class Book(
    val bookId: BookId,
    val loan: Loan,
    val reservation: Reservation,
    val state: BookState,
) {

    companion object {

         // PLACEHOLDER FOR NON-INITIALIZED BOOKS
        fun empty(): Book = EMPTY_BOOK


        // Applies the specified event to the current state
        // of a book and returns that the new state.
        fun apply(event: BookEvent, current: Book): Book {
            return when (event) {
                is BookRegistered -&gt; Book(
                    event.bookId,
                    AvailableForLoan,
                    NoReservation,
                    BookState.AVAILABLE
                )

                is BookBorrowed -&gt; current.copy(
                    loan = ActiveLoan(
                        event.loanId,
                        event.readerId,
                        event.loanDate,
                        event.loanEndDate,
                        0
                    ),
                    reservation = NoReservation,
                    state = BookState.BORROWED
                )

                is BookReturned -&gt; current.copy(
                    loan = AvailableForLoan,
                    state = BookState.AVAILABLE
                )

                is BookReserved -&gt; current.copy(
                    reservation = ActiveReservation(
                        event.readerId,
                        event.reservedAt,
                        event.expiresAt
                    )
                )

                is ReservationCleared -&gt; current.copy(
                    reservation = NoReservation
                )
            }
        }
    }
}" style="color:#d8dee9ff;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki" style="background-color: #2e3440ff"><code><span class="line"><span style="color: #81A1C1">data</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">class</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Book</span><span style="color: #ECEFF4">(</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">bookId</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">loan</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Loan</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">reservation</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Reservation</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">state</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookState</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #ECEFF4">)</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">companion</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">object</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">         </span><span style="color: #616E88">// PLACEHOLDER FOR NON-INITIALIZED BOOKS</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">empty</span><span style="color: #ECEFF4">()</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Book</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">EMPTY_BOOK</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #616E88">// Applies the specified event to the current state</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #616E88">// of a book and returns that the new state.</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">apply</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9">event</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookEvent</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">current</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Book</span><span style="color: #ECEFF4">)</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Book</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">            </span><span style="color: #81A1C1">return</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">when</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">event</span><span style="color: #ECEFF4">)</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">                </span><span style="color: #81A1C1">is</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookRegistered</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">-&gt;</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Book</span><span style="color: #ECEFF4">(</span></span>
<span class="line"><span style="color: #D8DEE9FF">                    event</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">bookId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">                    </span><span style="color: #8FBCBB">AvailableForLoan</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">                    </span><span style="color: #8FBCBB">NoReservation</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">                    </span><span style="color: #8FBCBB">BookState</span><span style="color: #ECEFF4">.</span><span style="color: #8FBCBB">AVAILABLE</span></span>
<span class="line"><span style="color: #D8DEE9FF">                </span><span style="color: #ECEFF4">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">                </span><span style="color: #81A1C1">is</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookBorrowed</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">-&gt;</span><span style="color: #D8DEE9FF"> current</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">copy</span><span style="color: #ECEFF4">(</span></span>
<span class="line"><span style="color: #D8DEE9FF">                    loan </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ActiveLoan</span><span style="color: #ECEFF4">(</span></span>
<span class="line"><span style="color: #D8DEE9FF">                        event</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">loanId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">                        event</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">readerId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">                        event</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">loanDate</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">                        event</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">loanEndDate</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">                        </span><span style="color: #B48EAD">0</span></span>
<span class="line"><span style="color: #D8DEE9FF">                    </span><span style="color: #ECEFF4">),</span></span>
<span class="line"><span style="color: #D8DEE9FF">                    reservation </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">NoReservation</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">                    state </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookState</span><span style="color: #ECEFF4">.</span><span style="color: #8FBCBB">BORROWED</span></span>
<span class="line"><span style="color: #D8DEE9FF">                </span><span style="color: #ECEFF4">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">                </span><span style="color: #81A1C1">is</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookReturned</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">-&gt;</span><span style="color: #D8DEE9FF"> current</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">copy</span><span style="color: #ECEFF4">(</span></span>
<span class="line"><span style="color: #D8DEE9FF">                    loan </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">AvailableForLoan</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">                    state </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookState</span><span style="color: #ECEFF4">.</span><span style="color: #8FBCBB">AVAILABLE</span></span>
<span class="line"><span style="color: #D8DEE9FF">                </span><span style="color: #ECEFF4">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">                </span><span style="color: #81A1C1">is</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookReserved</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">-&gt;</span><span style="color: #D8DEE9FF"> current</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">copy</span><span style="color: #ECEFF4">(</span></span>
<span class="line"><span style="color: #D8DEE9FF">                    reservation </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ActiveReservation</span><span style="color: #ECEFF4">(</span></span>
<span class="line"><span style="color: #D8DEE9FF">                        event</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">readerId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">                        event</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">reservedAt</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">                        event</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">expiresAt</span></span>
<span class="line"><span style="color: #D8DEE9FF">                    </span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">                </span><span style="color: #ECEFF4">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">                </span><span style="color: #81A1C1">is</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ReservationCleared</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">-&gt;</span><span style="color: #D8DEE9FF"> current</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">copy</span><span style="color: #ECEFF4">(</span></span>
<span class="line"><span style="color: #D8DEE9FF">                    reservation </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">NoReservation</span></span>
<span class="line"><span style="color: #D8DEE9FF">                </span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">            </span><span style="color: #ECEFF4">}</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #ECEFF4">}</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #ECEFF4">}</span></span>
<span class="line"><span style="color: #ECEFF4">}</span></span></code></pre></div>



<p>As you can see, the apply function does an exhaustive pattern match of the specified event and builds the new state of the book using the <code>copy()</code> function, which allows focusing on the book attributes that actually need to change.</p>



<p>In the next section, we will look into how to write business logic for our book entity.</p>



<h2>It&#8217;s Time for Some Business Logic</h2>



<p>In the previous section, we just saw how to build the state of our book entity using events exclusively. We did not implement any business or domain logic so far. Thus, it&#8217;s time to focus on implementing business logic. </p>



<p>I prefer to group each operation into its own package. That way, we organize our code in a way that reflects business capabilities. Ultimately, it comes down to a matter of personal preference.</p>



<p>Let&#8217;s start with an easy one: The feature of registering books is implemented in the <code>RegisterBook</code> object, which is contained in its own package. I use the specifier &#8220;object&#8221; to avoid the need of creating instances. The following code snippet shows the implementation of the register book functionality.</p>



<div class="wp-block-kevinbatdorf-code-block-pro" style="font-size:1rem;line-height:1.5rem"><span style="display:block;padding:16px 0 0 16px;margin-bottom:-1px;width:100%;text-align:left;background-color:#2e3440ff"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></span><span role="button" tabindex="0" data-code="package com.cassisi.book.register

import com.cassisi.book.BookId
import com.cassisi.book.BookRegistered

object RegisterBook {

    fun handle(command: RegisterBookCommand): BookRegistered {
        return BookRegistered(command.bookId)
    }

}

data class RegisterBookCommand(val bookId: BookId)" style="color:#d8dee9ff;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki" style="background-color: #2e3440ff"><code><span class="line"><span style="color: #81A1C1">package</span><span style="color: #D8DEE9FF"> com.cassisi.book.register</span></span>
<span class="line"></span>
<span class="line"><span style="color: #81A1C1">import</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">com.cassisi.book.BookId</span></span>
<span class="line"><span style="color: #81A1C1">import</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">com.cassisi.book.BookRegistered</span></span>
<span class="line"></span>
<span class="line"><span style="color: #81A1C1">object</span><span style="color: #D8DEE9FF"> RegisterBook </span><span style="color: #ECEFF4">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">handle</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9">command</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">RegisterBookCommand</span><span style="color: #ECEFF4">)</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookRegistered</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">return</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookRegistered</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">command</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">bookId</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #ECEFF4">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ECEFF4">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #81A1C1">data</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">class</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">RegisterBookCommand</span><span style="color: #ECEFF4">(</span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">bookId</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookId</span><span style="color: #ECEFF4">)</span></span></code></pre></div>



<p>The handle method just takes a <code>RegisterBookCommand</code> and returns an <code>BookRegistered</code> event with the book identifier contained in the command. Calling this function basically creates a book entity.  Most scenarios, however, require the current state of an entity in order for the command to be executed against it, as we will see in the next example.</p>



<p>Let&#8217;s consider the functionality of borrowing books. As this is another feature, it is contained in its own package and file. The <code>BorrowBook</code> implementation does not only take a specific command but also the current state of a book entity. Furthermore, it requires a (pseudo) policy for validation purposes, which could also be considered a domain service from DDD.</p>



<div class="wp-block-kevinbatdorf-code-block-pro" style="font-size:1rem;line-height:1.5rem"><span style="display:block;padding:16px 0 0 16px;margin-bottom:-1px;width:100%;text-align:left;background-color:#2e3440ff"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></span><span role="button" tabindex="0" data-code="package com.cassisi.book.borrow

import com.cassisi.book.*
import com.cassisi.book.BookReservedByOtherReader
import com.cassisi.reader.ReaderId
import java.time.LocalDate
import java.util.*

object BorrowBook {

    fun handle(command: BorrowBookCommand, current: Book, policy: BorrowBookPolicy): Result<BookBorrowed&gt; {
        // validate if book is available
        if (current.state != BookState.AVAILABLE) {
            return Result.failure(BookAlreadyLoan(current.bookId))
        }

        // validate that book was not reserved by someone else
        if (current.reservation is ActiveReservation) {
            if (current.reservation.readerId != command.readerId) {
                return Result.failure(BookReservedByOtherReader(command.readerId, current.reservation.readerId))
            }
        }

        // validate if student borrow policy
        val result = policy.validateIfStudentIsAllowedToBorrowBook(command.readerId)
        result.onFailure { return Result.failure(it) }

        // the book can be borrowed, so we create the loan data
        val loanId = LoanId(UUID.randomUUID())
        val startDate = command.startDate
        val endDate = startDate.plusWeeks(6)

        // create event
        val bookBorrowedEvent = BookBorrowed(
            current.bookId,
            command.readerId,
            loanId,
            startDate,
            endDate
        )

        // return a result containing the event
        return Result.success(bookBorrowedEvent)
    }
}

data class BorrowBookCommand(
    val readerId: ReaderId,
    val startDate: LocalDate
)" style="color:#d8dee9ff;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki" style="background-color: #2e3440ff"><code><span class="line"><span style="color: #81A1C1">package</span><span style="color: #D8DEE9FF"> com.cassisi.book.borrow</span></span>
<span class="line"></span>
<span class="line"><span style="color: #81A1C1">import</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">com.cassisi.book.*</span></span>
<span class="line"><span style="color: #81A1C1">import</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">com.cassisi.book.BookReservedByOtherReader</span></span>
<span class="line"><span style="color: #81A1C1">import</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">com.cassisi.reader.ReaderId</span></span>
<span class="line"><span style="color: #81A1C1">import</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">java.time.LocalDate</span></span>
<span class="line"><span style="color: #81A1C1">import</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">java.util.*</span></span>
<span class="line"></span>
<span class="line"><span style="color: #81A1C1">object</span><span style="color: #D8DEE9FF"> BorrowBook </span><span style="color: #ECEFF4">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">handle</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9">command</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBookCommand</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">current</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Book</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">policy</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBookPolicy</span><span style="color: #ECEFF4">)</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Result</span><span style="color: #81A1C1">&lt;</span><span style="color: #8FBCBB">BookBorrowed</span><span style="color: #81A1C1">&gt;</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #616E88">// validate if book is available</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">if</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">current</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">state </span><span style="color: #81A1C1">!=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookState</span><span style="color: #ECEFF4">.</span><span style="color: #8FBCBB">AVAILABLE</span><span style="color: #ECEFF4">)</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">            </span><span style="color: #81A1C1">return</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Result</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">failure</span><span style="color: #ECEFF4">(</span><span style="color: #8FBCBB">BookAlreadyLoan</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">current</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">bookId</span><span style="color: #ECEFF4">))</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #ECEFF4">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #616E88">// validate that book was not reserved by someone else</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">if</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">current</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">reservation </span><span style="color: #81A1C1">is</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ActiveReservation</span><span style="color: #ECEFF4">)</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">            </span><span style="color: #81A1C1">if</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">current</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">reservation</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">readerId </span><span style="color: #81A1C1">!=</span><span style="color: #D8DEE9FF"> command</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">readerId</span><span style="color: #ECEFF4">)</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">                </span><span style="color: #81A1C1">return</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Result</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">failure</span><span style="color: #ECEFF4">(</span><span style="color: #8FBCBB">BookReservedByOtherReader</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">command</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">readerId</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> current</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">reservation</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">readerId</span><span style="color: #ECEFF4">))</span></span>
<span class="line"><span style="color: #D8DEE9FF">            </span><span style="color: #ECEFF4">}</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #ECEFF4">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #616E88">// validate if student borrow policy</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> result </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> policy</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">validateIfStudentIsAllowedToBorrowBook</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">command</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">readerId</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        result</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">onFailure </span><span style="color: #ECEFF4">{</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">return</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Result</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">failure</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">it</span><span style="color: #ECEFF4">)</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #616E88">// the book can be borrowed, so we create the loan data</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> loanId </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">LoanId</span><span style="color: #ECEFF4">(</span><span style="color: #8FBCBB">UUID</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">randomUUID</span><span style="color: #ECEFF4">())</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> startDate </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> command</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">startDate</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> endDate </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> startDate</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">plusWeeks</span><span style="color: #ECEFF4">(</span><span style="color: #B48EAD">6</span><span style="color: #ECEFF4">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #616E88">// create event</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> bookBorrowedEvent </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookBorrowed</span><span style="color: #ECEFF4">(</span></span>
<span class="line"><span style="color: #D8DEE9FF">            current</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">bookId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">            command</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">readerId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">            loanId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">            startDate</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">            endDate</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #ECEFF4">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #616E88">// return a result containing the event</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">return</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Result</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">success</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">bookBorrowedEvent</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #ECEFF4">}</span></span>
<span class="line"><span style="color: #ECEFF4">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #81A1C1">data</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">class</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBookCommand</span><span style="color: #ECEFF4">(</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">readerId</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ReaderId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">startDate</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">LocalDate</span></span>
<span class="line"><span style="color: #ECEFF4">)</span></span></code></pre></div>



<p>The handle method implements the domain and business logic required for borrowing a book. It validates whether the command is allowed to be executed or not. Unlike the previous example, this handle method can actually fail, which is why I prefer to return a <code>Result</code> object rather than throwing exceptions. In the case of failures, a well-defined business exception is returned. Should the execution be successful from a domain perspective, a <code>Result</code> object containing the <code>BookBorrowed</code> event is returned.</p>



<p>That is it! We implemented an event-sourced domain model using functional code only. We will have a look into how the domain model can be tested in the next section. </p>



<h2>Improved Testability</h2>



<p>Functional programming promises better testability and predictability. In fact, the event-sourced domain model that we have built so far is highly testable. All code consists of functions and immutable data structures, with its data accessible from anywhere.</p>



<p>It is very straightforward to test the domain model, as shown in the following code snippet. All we have to do is to specify a command and the current state of a book, call the handle method of the feature we want to test, and then compare the result with what we expect it to be. This approach allows testing many different scenarios (meaning: different command and state combinations) and test whether they behave as expected. The following code snippet contains three test cases: one for registering a book and two for borrowing a book.</p>



<div class="wp-block-kevinbatdorf-code-block-pro" style="font-size:1rem;line-height:1.5rem"><span style="display:block;padding:16px 0 0 16px;margin-bottom:-1px;width:100%;text-align:left;background-color:#2e3440ff"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></span><span role="button" tabindex="0" data-code="class BookTest {

    @Test
    fun registerBook() {
        val bookId = BookId(UUID.randomUUID())
        val command = RegisterBookCommand(bookId)
        val bookRegistered = RegisterBook.handle(command)

        Assertions.assertEquals(bookId, bookRegistered.bookId)
    }

    @Test
    fun borrowBook() {
        val bookId = BookId(UUID.randomUUID())
        val readerId = ReaderId(UUID.randomUUID())
        val startDate = LocalDate.now()
        val expectedEndDate = startDate.plusWeeks(6)

        val command = BorrowBookCommand(readerId, startDate)
        val current = Book(bookId, AvailableForLoan, NoReservation, BookState.AVAILABLE)
        val policy = BorrowBookPolicy()

        val result = BorrowBook.handle(command, current, policy)

        Assertions.assertTrue(result.isSuccess)

        val event = result.getOrThrow()

        Assertions.assertEquals(bookId, event.bookId)
        Assertions.assertEquals(readerId, event.readerId)
        Assertions.assertEquals(startDate, event.loanDate)
        Assertions.assertEquals(expectedEndDate, event.loanEndDate)
    }

    @Test
    fun borrowBook_alreadyLent() {
        val bookId = BookId(UUID.randomUUID())
        val readerId = ReaderId(UUID.randomUUID())
        val startDate = LocalDate.now()
        val expectedEndDate = startDate.plusWeeks(6)

        val activeLoan = ActiveLoan(
            LoanId(UUID.randomUUID()),
            readerId,
            startDate,
            expectedEndDate,
            0
        )

        val command = BorrowBookCommand(readerId, startDate)
        val current = Book(bookId, activeLoan, NoReservation, BookState.BORROWED)
        val policy = BorrowBookPolicy()

        val result = BorrowBook.handle(command, current, policy)
        Assertions.assertTrue(result.isFailure)

        val exception = result.exceptionOrNull()!!
        Assertions.assertEquals(BookAlreadyLoan::class, exception::class)
    }

}" style="color:#d8dee9ff;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki" style="background-color: #2e3440ff"><code><span class="line"><span style="color: #81A1C1">class</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookTest</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">@Test</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">registerBook</span><span style="color: #ECEFF4">()</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> bookId </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookId</span><span style="color: #ECEFF4">(</span><span style="color: #8FBCBB">UUID</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">randomUUID</span><span style="color: #ECEFF4">())</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> command </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">RegisterBookCommand</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">bookId</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> bookRegistered </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">RegisterBook</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">handle</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">command</span><span style="color: #ECEFF4">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #8FBCBB">Assertions</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">assertEquals</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">bookId</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> bookRegistered</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">bookId</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #ECEFF4">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">@Test</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">borrowBook</span><span style="color: #ECEFF4">()</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> bookId </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookId</span><span style="color: #ECEFF4">(</span><span style="color: #8FBCBB">UUID</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">randomUUID</span><span style="color: #ECEFF4">())</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> readerId </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ReaderId</span><span style="color: #ECEFF4">(</span><span style="color: #8FBCBB">UUID</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">randomUUID</span><span style="color: #ECEFF4">())</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> startDate </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">LocalDate</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">now</span><span style="color: #ECEFF4">()</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> expectedEndDate </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> startDate</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">plusWeeks</span><span style="color: #ECEFF4">(</span><span style="color: #B48EAD">6</span><span style="color: #ECEFF4">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> command </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBookCommand</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">readerId</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> startDate</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> current </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Book</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">bookId</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">AvailableForLoan</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">NoReservation</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookState</span><span style="color: #ECEFF4">.</span><span style="color: #8FBCBB">AVAILABLE</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> policy </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBookPolicy</span><span style="color: #ECEFF4">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> result </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBook</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">handle</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">command</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> current</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> policy</span><span style="color: #ECEFF4">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #8FBCBB">Assertions</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">assertTrue</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">result</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">isSuccess</span><span style="color: #ECEFF4">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> event </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> result</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">getOrThrow</span><span style="color: #ECEFF4">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #8FBCBB">Assertions</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">assertEquals</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">bookId</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> event</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">bookId</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #8FBCBB">Assertions</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">assertEquals</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">readerId</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> event</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">readerId</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #8FBCBB">Assertions</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">assertEquals</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">startDate</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> event</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">loanDate</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #8FBCBB">Assertions</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">assertEquals</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">expectedEndDate</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> event</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">loanEndDate</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #ECEFF4">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">@Test</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">borrowBook_alreadyLent</span><span style="color: #ECEFF4">()</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> bookId </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookId</span><span style="color: #ECEFF4">(</span><span style="color: #8FBCBB">UUID</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">randomUUID</span><span style="color: #ECEFF4">())</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> readerId </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ReaderId</span><span style="color: #ECEFF4">(</span><span style="color: #8FBCBB">UUID</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">randomUUID</span><span style="color: #ECEFF4">())</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> startDate </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">LocalDate</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">now</span><span style="color: #ECEFF4">()</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> expectedEndDate </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> startDate</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">plusWeeks</span><span style="color: #ECEFF4">(</span><span style="color: #B48EAD">6</span><span style="color: #ECEFF4">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> activeLoan </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ActiveLoan</span><span style="color: #ECEFF4">(</span></span>
<span class="line"><span style="color: #D8DEE9FF">            </span><span style="color: #8FBCBB">LoanId</span><span style="color: #ECEFF4">(</span><span style="color: #8FBCBB">UUID</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">randomUUID</span><span style="color: #ECEFF4">()),</span></span>
<span class="line"><span style="color: #D8DEE9FF">            readerId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">            startDate</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">            expectedEndDate</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">            </span><span style="color: #B48EAD">0</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #ECEFF4">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> command </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBookCommand</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">readerId</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> startDate</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> current </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Book</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">bookId</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> activeLoan</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">NoReservation</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookState</span><span style="color: #ECEFF4">.</span><span style="color: #8FBCBB">BORROWED</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> policy </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBookPolicy</span><span style="color: #ECEFF4">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> result </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBook</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">handle</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">command</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> current</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> policy</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #8FBCBB">Assertions</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">assertTrue</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">result</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">isFailure</span><span style="color: #ECEFF4">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> exception </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> result</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">exceptionOrNull</span><span style="color: #ECEFF4">()</span><span style="color: #81A1C1">!!</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #8FBCBB">Assertions</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">assertEquals</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9">BookAlreadyLoan</span><span style="color: #ECEFF4">::</span><span style="color: #81A1C1">class</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">exception</span><span style="color: #ECEFF4">::</span><span style="color: #81A1C1">class</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #ECEFF4">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ECEFF4">}</span></span></code></pre></div>



<p>  </p>



<h2>Application Services and Infrastructure</h2>



<p>Similar to my previous post, I group application-specific software in a different software module. For example, in order to borrow a book from an application perspective, the book entity must first be loaded from the event store, then validated against the according command, and finally, the new events must be stored in the event store. This flow is application-specific and should therefore be kept outside the domain.</p>



<p>Implementing application services is mostly straightforward. I prefer to group and implement each use case in its own package. Not only does this approach respect the Single Responsibility Principle (SIP) but also decreases coupling points. </p>



<p>The borrow book use case implementation is shown in the following code snippet.</p>



<div class="wp-block-kevinbatdorf-code-block-pro" style="font-size:1rem;line-height:1.5rem"><span style="display:block;padding:16px 0 0 16px;margin-bottom:-1px;width:100%;text-align:left;background-color:#2e3440ff"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></span><span role="button" tabindex="0" data-code="class BorrowBookExecutor(
    private val repository: BorrowBookRepository,
    private val policy: BorrowBookPolicy
) : IBorrowBook {

    override fun execute(bookId: BookId, readerId: ReaderId, loanAt: LocalDate): Result<Unit&gt; {
        val currentBook = repository.get(bookId)
        val command = BorrowBookCommand(readerId, loanAt)
        val result = BorrowBook.handle(command, currentBook, policy)
        return result.fold({
            repository.save(bookId, it)
            Result.success(Unit)
        }, { Result.failure(it) })
    }
    
}" style="color:#d8dee9ff;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki" style="background-color: #2e3440ff"><code><span class="line"><span style="color: #81A1C1">class</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBookExecutor</span><span style="color: #ECEFF4">(</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">private</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">repository</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBookRepository</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">private</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">policy</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBookPolicy</span></span>
<span class="line"><span style="color: #ECEFF4">)</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB; font-style: italic">IBorrowBook</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">override</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">execute</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9">bookId</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookId</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">readerId</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ReaderId</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">loanAt</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">LocalDate</span><span style="color: #ECEFF4">)</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Result</span><span style="color: #81A1C1">&lt;</span><span style="color: #8FBCBB">Unit</span><span style="color: #81A1C1">&gt;</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> currentBook </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> repository</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">get</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">bookId</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> command </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBookCommand</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">readerId</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> loanAt</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> result </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBook</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">handle</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">command</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> currentBook</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> policy</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">return</span><span style="color: #D8DEE9FF"> result</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">fold</span><span style="color: #ECEFF4">({</span></span>
<span class="line"><span style="color: #D8DEE9FF">            repository</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">save</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">bookId</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> it</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">            </span><span style="color: #8FBCBB">Result</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">success</span><span style="color: #ECEFF4">(</span><span style="color: #8FBCBB">Unit</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #ECEFF4">},</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Result</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">failure</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">it</span><span style="color: #ECEFF4">)</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">})</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #ECEFF4">}</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span></span>
<span class="line"><span style="color: #ECEFF4">}</span></span></code></pre></div>



<p>If the execution of the <code>handle()</code> method was successful, the new event is stored in the event store. In case of failures, the execute method returns a failure containing the business exception. </p>



<p>Note that the implementation uses its own repository, which contains a contract with two methods: <code>get()</code> and <code>save()</code>. An in-memory event store is used for the purpose of this example. The implementation of that interface could then look as follows:</p>



<div class="wp-block-kevinbatdorf-code-block-pro" style="font-size:1rem;line-height:1.5rem"><span style="display:block;padding:16px 0 0 16px;margin-bottom:-1px;width:100%;text-align:left;background-color:#2e3440ff"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></span><span role="button" tabindex="0" data-code="class BorrowBookEventStoreRepository : BorrowBookRepository {

    override fun get(bookId: BookId): Book {
        val events = SimpleEventStore.getEvents(bookId)
        return events.fold(Book.empty()) { acc, event -&gt; Book.apply(event, acc) }
    }

    override fun save(bookId: BookId, changes: BookBorrowed) {
        SimpleEventStore.appendEvents(bookId, listOf(changes))
    }
}" style="color:#d8dee9ff;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki" style="background-color: #2e3440ff"><code><span class="line"><span style="color: #81A1C1">class</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBookEventStoreRepository</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB; font-style: italic">BorrowBookRepository</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">override</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">get</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9">bookId</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookId</span><span style="color: #ECEFF4">)</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Book</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> events </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">SimpleEventStore</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">getEvents</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">bookId</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">return</span><span style="color: #D8DEE9FF"> events</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">fold</span><span style="color: #ECEFF4">(</span><span style="color: #8FBCBB">Book</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">empty</span><span style="color: #ECEFF4">())</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span><span style="color: #D8DEE9FF"> acc</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> event </span><span style="color: #81A1C1">-&gt;</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Book</span><span style="color: #ECEFF4">.</span><span style="color: #88C0D0">apply</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">event</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> acc</span><span style="color: #ECEFF4">)</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">}</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #ECEFF4">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">override</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">save</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9">bookId</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookId</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">changes</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookBorrowed</span><span style="color: #ECEFF4">)</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #8FBCBB">SimpleEventStore</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">appendEvents</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">bookId</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">listOf</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">changes</span><span style="color: #ECEFF4">))</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #ECEFF4">}</span></span>
<span class="line"><span style="color: #ECEFF4">}</span></span></code></pre></div>



<p>Replaying the state of a book entity requires nothing more than a left fold over the previous events, which were loaded from the event store.</p>



<h2>Final Thoughts</h2>



<p>In this blog post, I presented how we can build an event-sourced domain model following a functional approach. Functional programming and event sourcing complement each other very well, as both embrace the ideas of immutability and functions.   </p>



<p>A functional domain model results in highly testable and predictive code. Testing is pretty much straightforward, as shown in this post. Often times, it is easier to test a functional model rather than an object-oriented model. Not only do we avoid race conditions thanks to the immutability of our data structures, we also have full access to variables (as they are public by default) and don&#8217;t need to find a way how to access and test private fields. </p>



<p>Functional programming does not yet seem to be as widely used as object-oriented programming. Therefore, functional code might look like a bit odd for someone used to develop domain models following an object-oriented approach. Improved testability, however, might push some developers toward the functional approach.   </p>



<p>Whether to use a functional model or a more classical approach, such as mutable aggregates, may come down to personal preference or company regulations. Both approaches are valid and are equally well-suited for implementing an event-sourced domain model. As you might have noticed already, this blog post implemented the same domain model as described in my previous post 😉</p>



<h2>Additional Links</h2>



<ul><li><a href="https://github.com/DomenicDev/personal-blog-examples/tree/main/functional-library">Source code</a></li><li><a href="/2022/09/25/how-to-build-an-event-sourced-domain-model-a-practical-introduction/">Previous post</a></li></ul>



<p>Photo by <a href="https://unsplash.com/es/@antoine1003?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Antoine Dautry</a> on <a href="https://unsplash.com/s/photos/math?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></p>
<p>The post <a rel="nofollow" href="/2022/10/13/functional-programming-event-sourcing-a-good-idea/">Functional Programming + Event Sourcing = A Good Idea?</a> appeared first on <a rel="nofollow" href="/">Domenic Cassisi</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>How to Build an Event-Sourced Domain Model &#8211; A Practical Introduction</title>
		<link>/2022/09/25/how-to-build-an-event-sourced-domain-model-a-practical-introduction/</link>
		
		<dc:creator><![CDATA[Domenic Cassisi]]></dc:creator>
		<pubDate>Sun, 25 Sep 2022 13:07:34 +0000</pubDate>
				<category><![CDATA[Domain-Driven Design]]></category>
		<category><![CDATA[Event Sourcing]]></category>
		<category><![CDATA[Software Architecture]]></category>
		<category><![CDATA[clean architecture]]></category>
		<category><![CDATA[ddd]]></category>
		<category><![CDATA[domain-driven design]]></category>
		<category><![CDATA[event sourcing]]></category>
		<guid isPermaLink="false">/?p=235</guid>

					<description><![CDATA[<p>Domain-Driven Design (DDD) is a software development approach first described by Eric Evans. In my previous post, I described that the idea of Event Sourcing, CQRS, and DDD complement each other very well. Feel free to check out my previous post for more information. Today, I would like to focus on combining Event Sourcing with [&#8230;]</p>
<p>The post <a rel="nofollow" href="/2022/09/25/how-to-build-an-event-sourced-domain-model-a-practical-introduction/">How to Build an Event-Sourced Domain Model &#8211; A Practical Introduction</a> appeared first on <a rel="nofollow" href="/">Domenic Cassisi</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>Domain-Driven Design (DDD) is a software development approach first described by Eric Evans. In my previous post, I described that the idea of Event Sourcing, CQRS, and DDD complement each other very well. Feel free to check out <a href="/2022/09/18/event-sourcing-cqrs-ddd-and-event-driven-microservices-what-did-i-learn-from-my-masters-thesis/">my previous post</a> for more information.</p>



<p>Today, I would like to focus on combining Event Sourcing with DDD. Additionally, I want to illustrate that the &#8220;domain model&#8221; approach fits well with the clean architecture style described by Robert C. Martin. Depending on the source of reference, the clean architecture style is also known as onion architecture or hexagonal architecture. Although those notions might differ in detail, all of them focus on the separation of concerns by organizing software code into multiple layers, with the domain layer taking the center place.</p>



<p>DDD does not require Event Sourcing. If we, however, decide to use Event Sourcing for our domain model, we refer to our domain model as <em>an event-sourced domain model</em>. This definition, which I first read about in <em>Learning Domain-Driven Design</em> (Vlad Khononov), emphasizes that the domain model is stored as a sequence of events rather than its current state.</p>



<h2>The example scenario</h2>



<p>Domain-Driven Design is most suited for complex domains. In our case, we use a (rather simple) library domain for lending and returning books. A <em>reader</em> can borrow a <em>book</em>, return a book, reserve a book, clear a reservation, etc.</p>



<p>In a real-life application, there are many subdomains and bounded contexts to consider, for example, lending, shipping, catalog, charging, reader management, and the like. Today, we just focus on the <em>lending subdomain</em>.</p>



<p>The lending subdomain knows about books and readers. In addition, a book is associated with its loans. Both book and reader represent aggregates, while the concept of a loan is part of a book. It is to be noted that there are several options to build such a domain model, with each approach coming with a different set of trade-offs. Ultimately, the most appropriate solution strongly depends on the concrete business environment.</p>



<h2>Fundamentals</h2>



<p>Alright! Let&#8217;s jump into some source code. The following code snippets are written using the Kotlin programming language, nevertheless, the source code is rather straightforward and should look similar to many other higher-level programming languages. The full source code is available <a href="https://github.com/DomenicDev/personal-blog-examples/tree/main/simple-library">here</a>.</p>



<p>The first thing to define is the concept of an aggregate. An aggregate can be clearly identified by its identifier (ID). A possible contract of an aggregate might look as follows:</p>



<div class="wp-block-kevinbatdorf-code-block-pro" style="font-size:1rem;line-height:1rem"><span style="display:block;padding:16px 0 0 16px;margin-bottom:-1px;width:100%;text-align:left;background-color:#2e3440ff"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></span><span role="button" tabindex="0" data-code="interface Aggregate<ID&gt; {

    fun getId(): ID

}" style="color:#d8dee9ff;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki" style="background-color: #2e3440ff"><code><span class="line"><span style="color: #81A1C1">interface</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Aggregate</span><span style="color: #81A1C1">&lt;</span><span style="color: #8FBCBB">ID</span><span style="color: #81A1C1">&gt;</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">getId</span><span style="color: #ECEFF4">()</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ID</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ECEFF4">}</span></span></code></pre></div>



<p>An event-sourced aggregate needs to be able to load its state from the previous sequence of events and return any changes (events) that have not yet been saved. Therefore, the concept of an event-sourced aggregate requires at least two more contracts. </p>



<div class="wp-block-kevinbatdorf-code-block-pro" style="font-size:1rem;line-height:1rem"><span style="display:block;padding:16px 0 0 16px;margin-bottom:-1px;width:100%;text-align:left;background-color:#2e3440ff"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></span><span role="button" tabindex="0" data-code="interface EventSourcedAggregate<ID, EventType&gt; : Aggregate<ID&gt; {

    /**
     * Builds the current state of that aggregate
     * from the history of previously stored events.
     */
    fun loadFromHistory(events: List<EventType&gt;)

    /**
     * Returns a list of events that have occurred
     * after the aggregate got initialized.
     */
    fun getChanges(): List<EventType&gt;

}" style="color:#d8dee9ff;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki" style="background-color: #2e3440ff"><code><span class="line"><span style="color: #81A1C1">interface</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">EventSourcedAggregate</span><span style="color: #81A1C1">&lt;</span><span style="color: #8FBCBB">ID</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">EventType</span><span style="color: #81A1C1">&gt;</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB; font-style: italic">Aggregate</span><span style="color: #81A1C1">&lt;</span><span style="color: #8FBCBB">ID</span><span style="color: #81A1C1">&gt;</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #616E88">/**</span></span>
<span class="line"><span style="color: #616E88">     * Builds the current state of that aggregate</span></span>
<span class="line"><span style="color: #616E88">     * from the history of previously stored events.</span></span>
<span class="line"><span style="color: #616E88">     */</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">loadFromHistory</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9">events</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">List</span><span style="color: #81A1C1">&lt;</span><span style="color: #8FBCBB">EventType</span><span style="color: #81A1C1">&gt;</span><span style="color: #ECEFF4">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #616E88">/**</span></span>
<span class="line"><span style="color: #616E88">     * Returns a list of events that have occurred</span></span>
<span class="line"><span style="color: #616E88">     * after the aggregate got initialized.</span></span>
<span class="line"><span style="color: #616E88">     */</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">getChanges</span><span style="color: #ECEFF4">()</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">List</span><span style="color: #81A1C1">&lt;</span><span style="color: #8FBCBB">EventType</span><span style="color: #81A1C1">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ECEFF4">}</span></span></code></pre></div>



<p></p>



<blockquote class="wp-block-quote"><p><strong>Note about versioning:</strong> Event Sourcing often uses optimistic locking for appending events to an event store. This requires applying some kind of versioning to our aggregates in order to check if the aggregate was updated simultaneously, e.g. by another thread or process. In this blog, however, we omit the versioning aspect for reasons of clarity. Refer to <a href="https://github.com/DomenicDev/master-thesis-library-app/blob/main/domain-services/lending-service/domain/src/main/kotlin/de/cassisi/lending/common/BaseAggregate.kt">my more feature-rich library implementation</a> for how versioning can be implemented.  </p></blockquote>



<p>A straightforward base class implementation of that interface might look like the following class:</p>



<div class="wp-block-kevinbatdorf-code-block-pro" style="font-size:1rem;line-height:1.25rem"><span style="display:block;padding:16px 0 0 16px;margin-bottom:-1px;width:100%;text-align:left;background-color:#2e3440ff"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></span><span role="button" tabindex="0" data-code="abstract class BaseAggregate<ID, EventType&gt; (private val id: ID): EventSourcedAggregate<ID, EventType&gt; {

    /**
     * The list changes (events) stored as a mutable list.
     */
    private val changes = mutableListOf<EventType&gt;()

    override fun getId(): ID {
        return this.id
    }

    override fun loadFromHistory(events: List<EventType&gt;) {
        events.forEach { handleEvent(it) }
    }

    override fun getChanges(): List<EventType&gt; {
        return this.changes.toList()
    }

    /**
     * Adds the specified event to the list
     * of changes and invokes the handleEvent()
     * method for applying that event.
     */
    fun registerEvent(event: EventType) {
        changes.add(event)
        handleEvent(event)
    }

    /**
     * This method is invoked whenever a new event is
     * registered. Implement logic here to change current
     * state of the aggregate.
     */
    protected abstract fun handleEvent(event: EventType)

}" style="color:#d8dee9ff;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki" style="background-color: #2e3440ff"><code><span class="line"><span style="color: #81A1C1">abstract</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">class</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BaseAggregate</span><span style="color: #81A1C1">&lt;</span><span style="color: #8FBCBB">ID</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">EventType</span><span style="color: #81A1C1">&gt;</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">(</span><span style="color: #81A1C1">private</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">id</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ID</span><span style="color: #ECEFF4">)</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB; font-style: italic">EventSourcedAggregate</span><span style="color: #81A1C1">&lt;</span><span style="color: #8FBCBB">ID</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">EventType</span><span style="color: #81A1C1">&gt;</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #616E88">/**</span></span>
<span class="line"><span style="color: #616E88">     * The list changes (events) stored as a mutable list.</span></span>
<span class="line"><span style="color: #616E88">     */</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">private</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> changes </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> mutableListOf</span><span style="color: #81A1C1">&lt;</span><span style="color: #8FBCBB">EventType</span><span style="color: #81A1C1">&gt;</span><span style="color: #ECEFF4">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">override</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">getId</span><span style="color: #ECEFF4">()</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ID</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">return</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">this</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">id</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #ECEFF4">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">override</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">loadFromHistory</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9">events</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">List</span><span style="color: #81A1C1">&lt;</span><span style="color: #8FBCBB">EventType</span><span style="color: #81A1C1">&gt;</span><span style="color: #ECEFF4">)</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">        events</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">forEach </span><span style="color: #ECEFF4">{</span><span style="color: #D8DEE9FF"> handleEvent</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">it</span><span style="color: #ECEFF4">)</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">}</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #ECEFF4">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">override</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">getChanges</span><span style="color: #ECEFF4">()</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">List</span><span style="color: #81A1C1">&lt;</span><span style="color: #8FBCBB">EventType</span><span style="color: #81A1C1">&gt;</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">return</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">this</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">changes</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">toList</span><span style="color: #ECEFF4">()</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #ECEFF4">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #616E88">/**</span></span>
<span class="line"><span style="color: #616E88">     * Adds the specified event to the list</span></span>
<span class="line"><span style="color: #616E88">     * of changes and invokes the handleEvent()</span></span>
<span class="line"><span style="color: #616E88">     * method for applying that event.</span></span>
<span class="line"><span style="color: #616E88">     */</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">registerEvent</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9">event</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">EventType</span><span style="color: #ECEFF4">)</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">        changes</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">add</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">event</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        handleEvent</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">event</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #ECEFF4">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #616E88">/**</span></span>
<span class="line"><span style="color: #616E88">     * This method is invoked whenever a new event is</span></span>
<span class="line"><span style="color: #616E88">     * registered. Implement logic here to change current</span></span>
<span class="line"><span style="color: #616E88">     * state of the aggregate.</span></span>
<span class="line"><span style="color: #616E88">     */</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">protected</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">abstract</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">handleEvent</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9">event</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">EventType</span><span style="color: #ECEFF4">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ECEFF4">}</span></span></code></pre></div>



<p>This is everything required to implement a straightforward event-sourced domain model. Now, it is time to use that base class and implement a concrete aggregate. </p>



<h2>The Book aggregate</h2>



<p>I like to separate an aggregate&#8217;s contract and implementation, as it allows concentrating more on its behavior and what an aggregate should look like from the outside. The contract of the Book aggregate looks as follows:</p>



<div class="wp-block-kevinbatdorf-code-block-pro" style="font-size:1rem;line-height:1.25rem"><span style="display:block;padding:16px 0 0 16px;margin-bottom:-1px;width:100%;text-align:left;background-color:#2e3440ff"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></span><span role="button" tabindex="0" data-code="sealed interface Book : EventSourcedAggregate<BookId, BookEvent&gt; {

    fun borrowBook(readerId: ReaderId, startDate: LocalDate, policy: BorrowBookPolicy): Result<Book&gt;

    fun returnBook(returnDate: LocalDate): Result<Book&gt;

    fun reserveBook(readerId: ReaderId, reservationDate: LocalDate): Result<Book&gt;

    fun clearReservation(): Result<Book&gt;

}" style="color:#d8dee9ff;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki" style="background-color: #2e3440ff"><code><span class="line"><span style="color: #81A1C1">sealed</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">interface</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Book</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB; font-style: italic">EventSourcedAggregate</span><span style="color: #81A1C1">&lt;</span><span style="color: #8FBCBB">BookId</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookEvent</span><span style="color: #81A1C1">&gt;</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">borrowBook</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9">readerId</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ReaderId</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">startDate</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">LocalDate</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">policy</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBookPolicy</span><span style="color: #ECEFF4">)</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Result</span><span style="color: #81A1C1">&lt;</span><span style="color: #8FBCBB">Book</span><span style="color: #81A1C1">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">returnBook</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9">returnDate</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">LocalDate</span><span style="color: #ECEFF4">)</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Result</span><span style="color: #81A1C1">&lt;</span><span style="color: #8FBCBB">Book</span><span style="color: #81A1C1">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">reserveBook</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9">readerId</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ReaderId</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">reservationDate</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">LocalDate</span><span style="color: #ECEFF4">)</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Result</span><span style="color: #81A1C1">&lt;</span><span style="color: #8FBCBB">Book</span><span style="color: #81A1C1">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">clearReservation</span><span style="color: #ECEFF4">()</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Result</span><span style="color: #81A1C1">&lt;</span><span style="color: #8FBCBB">Book</span><span style="color: #81A1C1">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ECEFF4">}</span></span></code></pre></div>



<p>Note that this source code is very explicit and uses domain-specific types rather than generic types, wherever appropriate. For example, instead of specifying a UUID as a reader id, we define a special type <code>ReaderId</code> that wraps the corresponding UUID. This approach respects the ubiquitous language principle from DDD.</p>



<p>We use Kotlin&#8217;s <code>Result</code> type to make behavior even more specific. Instead of throwing exceptions in case of validation errors, which are often invisible from the invoking site, we return a result object that indicates the outcome of an executed command. The caller can then handle both successful executions and error conditions.</p>



<p>The book aggregate implementation contains all domain logic for executing commands. This is where all the complex domain logic lives. The following code snippet shows the book aggregate class and the borrow method.</p>



<div class="wp-block-kevinbatdorf-code-block-pro" style="font-size:1rem;line-height:1.25rem"><span style="display:block;padding:16px 0 0 16px;margin-bottom:-1px;width:100%;text-align:left;background-color:#2e3440ff"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></span><span role="button" tabindex="0" data-code="class BookAggregate(id: BookId) : Book, BaseAggregate<BookId, BookEvent&gt;(id) {

    private var currentLoan: Loan = NoLoan
    private var currentReservation: Reservation = NoReservation

    override fun borrowBook(readerId: ReaderId, startDate: LocalDate, policy: BorrowBookPolicy): Result<Book&gt; {
        // check if this book is already loan
        if (currentLoan is ActiveLoan) {
            return Result.failure(BookAlreadyLoan(getId()))
        }

        // check if there is a reservation that was made by another reader
        if (currentReservation is ActiveReservation) {
            val reservation = (currentReservation as ActiveReservation)
            if (reservation.readerId != readerId) {
                return Result.failure(BookReservedByOtherReader(readerId, reservation.readerId))
            }
        }

        // validate student borrow policy (max number of lent books reached etc. 
        val result = policy.validateIfStudentIsAllowedToBorrowBook(readerId)
        result.onFailure { return Result.failure(it) }


        // the book can be borrowed, thus an event is created
        val loanId = LoanId(UUID.randomUUID())
        val endDate = startDate.plusWeeks(6)
        val event = BookBorrowed(
            getId(),
            readerId,
            loanId,
            startDate,
            endDate
        )
        registerEvent(event)

        // clear reservation if book was reserved
        if (currentReservation is ActiveReservation) {
            clearReservation()
        }

        // return current instance
        return Result.success(this)
    }
    
    // ... other methods omitted for clarity reasons ...
     
}" style="color:#d8dee9ff;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki" style="background-color: #2e3440ff"><code><span class="line"><span style="color: #81A1C1">class</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookAggregate</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9">id</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookId</span><span style="color: #ECEFF4">)</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB; font-style: italic">Book</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BaseAggregate</span><span style="color: #81A1C1">&lt;</span><span style="color: #8FBCBB">BookId</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookEvent</span><span style="color: #81A1C1">&gt;</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">id</span><span style="color: #ECEFF4">)</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">private</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">var</span><span style="color: #D8DEE9FF"> currentLoan</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Loan</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">NoLoan</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">private</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">var</span><span style="color: #D8DEE9FF"> currentReservation</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Reservation</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">NoReservation</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">override</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">borrowBook</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9">readerId</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ReaderId</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">startDate</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">LocalDate</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">policy</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBookPolicy</span><span style="color: #ECEFF4">)</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Result</span><span style="color: #81A1C1">&lt;</span><span style="color: #8FBCBB">Book</span><span style="color: #81A1C1">&gt;</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #616E88">// check if this book is already loan</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">if</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">currentLoan </span><span style="color: #81A1C1">is</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ActiveLoan</span><span style="color: #ECEFF4">)</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">            </span><span style="color: #81A1C1">return</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Result</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">failure</span><span style="color: #ECEFF4">(</span><span style="color: #8FBCBB">BookAlreadyLoan</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">getId</span><span style="color: #ECEFF4">()))</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #ECEFF4">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #616E88">// check if there is a reservation that was made by another reader</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">if</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">currentReservation </span><span style="color: #81A1C1">is</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ActiveReservation</span><span style="color: #ECEFF4">)</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">            </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> reservation </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">currentReservation </span><span style="color: #81A1C1">as</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ActiveReservation</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">            </span><span style="color: #81A1C1">if</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">reservation</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">readerId </span><span style="color: #81A1C1">!=</span><span style="color: #D8DEE9FF"> readerId</span><span style="color: #ECEFF4">)</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">                </span><span style="color: #81A1C1">return</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Result</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">failure</span><span style="color: #ECEFF4">(</span><span style="color: #8FBCBB">BookReservedByOtherReader</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">readerId</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> reservation</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">readerId</span><span style="color: #ECEFF4">))</span></span>
<span class="line"><span style="color: #D8DEE9FF">            </span><span style="color: #ECEFF4">}</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #ECEFF4">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #616E88">// validate student borrow policy (max number of lent books reached etc. </span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> result </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> policy</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">validateIfStudentIsAllowedToBorrowBook</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">readerId</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        result</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">onFailure </span><span style="color: #ECEFF4">{</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">return</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Result</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">failure</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">it</span><span style="color: #ECEFF4">)</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #616E88">// the book can be borrowed, thus an event is created</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> loanId </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">LoanId</span><span style="color: #ECEFF4">(</span><span style="color: #8FBCBB">UUID</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">randomUUID</span><span style="color: #ECEFF4">())</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> endDate </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> startDate</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">plusWeeks</span><span style="color: #ECEFF4">(</span><span style="color: #B48EAD">6</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> event </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookBorrowed</span><span style="color: #ECEFF4">(</span></span>
<span class="line"><span style="color: #D8DEE9FF">            getId</span><span style="color: #ECEFF4">(),</span></span>
<span class="line"><span style="color: #D8DEE9FF">            readerId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">            loanId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">            startDate</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">            endDate</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        registerEvent</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">event</span><span style="color: #ECEFF4">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #616E88">// clear reservation if book was reserved</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">if</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">currentReservation </span><span style="color: #81A1C1">is</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ActiveReservation</span><span style="color: #ECEFF4">)</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">            clearReservation</span><span style="color: #ECEFF4">()</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #ECEFF4">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #616E88">// return current instance</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">return</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Result</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">success</span><span style="color: #ECEFF4">(</span><span style="color: #81A1C1">this</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #ECEFF4">}</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #616E88">// ... other methods omitted for clarity reasons ...</span></span>
<span class="line"><span style="color: #D8DEE9FF">     </span></span>
<span class="line"><span style="color: #ECEFF4">}</span></span></code></pre></div>



<p>First, we validate whether the command can be executed or not. In case of a validation error, we return a result object with a well-defined business exception indicating what went wrong.</p>



<p>After successful validation, a <code>BookBorrowed</code> event is created and added to the list of changes. The<code> registerEvent(event)</code> method in turn invokes the <code>handleEvent()</code> method, which applies changes to the current state of the aggregate. The following code snippet shows the handle method, which performs an exhaustive pattern match of the specified event:</p>



<div class="wp-block-kevinbatdorf-code-block-pro" style="font-size:1rem;line-height:1.25rem"><span style="display:block;padding:16px 0 0 16px;margin-bottom:-1px;width:100%;text-align:left;background-color:#2e3440ff"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></span><span role="button" tabindex="0" data-code="    override fun handleEvent(event: BookEvent) {  // <<--- invoked by registerEvent()
        when (event) {
            is BookRegistered -&gt; handle(event)
            is BookBorrowed -&gt; handle(event)
            is BookReturned -&gt; handle(event)
            is BookReserved -&gt; handle(event)
            is ReservationCleared -&gt; handle(event)
        }
    }

    private fun handle(event: BookBorrowed) {
        this.currentLoan = ActiveLoan(    // <<<---- apply changes to current state
            event.loanId,
            event.readerId,
            event.loanDate,
            event.loanEndDate,
            0
        )
    }" style="color:#d8dee9ff;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki" style="background-color: #2e3440ff"><code><span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">override</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">handleEvent</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9">event</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookEvent</span><span style="color: #ECEFF4">)</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span><span style="color: #D8DEE9FF">  </span><span style="color: #616E88">// &lt;&lt;--- invoked by registerEvent()</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">when</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">event</span><span style="color: #ECEFF4">)</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">            </span><span style="color: #81A1C1">is</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookRegistered</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">-&gt;</span><span style="color: #D8DEE9FF"> handle</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">event</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">            </span><span style="color: #81A1C1">is</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookBorrowed</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">-&gt;</span><span style="color: #D8DEE9FF"> handle</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">event</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">            </span><span style="color: #81A1C1">is</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookReturned</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">-&gt;</span><span style="color: #D8DEE9FF"> handle</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">event</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">            </span><span style="color: #81A1C1">is</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookReserved</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">-&gt;</span><span style="color: #D8DEE9FF"> handle</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">event</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">            </span><span style="color: #81A1C1">is</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ReservationCleared</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">-&gt;</span><span style="color: #D8DEE9FF"> handle</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">event</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #ECEFF4">}</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #ECEFF4">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">private</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">handle</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9">event</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookBorrowed</span><span style="color: #ECEFF4">)</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">this</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">currentLoan </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ActiveLoan</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">    </span><span style="color: #616E88">// &lt;&lt;&lt;---- apply changes to current state</span></span>
<span class="line"><span style="color: #D8DEE9FF">            event</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">loanId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">            event</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">readerId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">            event</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">loanDate</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">            event</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">loanEndDate</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">            </span><span style="color: #B48EAD">0</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #ECEFF4">}</span></span></code></pre></div>



<p>Note that we first register an event and then apply changes to the current state by handling that event. Only then, we can ensure that our application state is built exclusively from events. We could also write a separate state class for keeping the current state of an aggregate, which might be better suited for more complex aggregates with many child entities and value objects.</p>



<p>Testing the implementation is straightforward and does not require any infrastructure, as shown in the following code snippet:</p>



<div class="wp-block-kevinbatdorf-code-block-pro" style="font-size:1rem;line-height:1.25rem"><span style="display:block;padding:16px 0 0 16px;margin-bottom:-1px;width:100%;text-align:left;background-color:#2e3440ff"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></span><span role="button" tabindex="0" data-code="class BookTest {

    @Test
    fun borrowBook() {
        val bookId = BookId(UUID.randomUUID())
        val book = BookFactory.registerNewBook(bookId)

        val readerId = ReaderId(UUID.randomUUID())
        val today = LocalDate.now()
        val endDate = today.plusWeeks(6)
        val policy = BorrowBookPolicy()
        book.borrowBook(readerId, today, policy)

        val event = book.getChanges().last()
        Assertions.assertTrue(event is BookBorrowed)

        val bookBorrowed = event as BookBorrowed
        Assertions.assertEquals(bookId, bookBorrowed.bookId)
        Assertions.assertEquals(readerId, bookBorrowed.readerId)
        Assertions.assertEquals(today, bookBorrowed.loanDate)
        Assertions.assertEquals(endDate, bookBorrowed.loanEndDate)
    }

}" style="color:#d8dee9ff;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki" style="background-color: #2e3440ff"><code><span class="line"><span style="color: #81A1C1">class</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookTest</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">@Test</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">borrowBook</span><span style="color: #ECEFF4">()</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> bookId </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookId</span><span style="color: #ECEFF4">(</span><span style="color: #8FBCBB">UUID</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">randomUUID</span><span style="color: #ECEFF4">())</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> book </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookFactory</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">registerNewBook</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">bookId</span><span style="color: #ECEFF4">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> readerId </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ReaderId</span><span style="color: #ECEFF4">(</span><span style="color: #8FBCBB">UUID</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">randomUUID</span><span style="color: #ECEFF4">())</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> today </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">LocalDate</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">now</span><span style="color: #ECEFF4">()</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> endDate </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> today</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">plusWeeks</span><span style="color: #ECEFF4">(</span><span style="color: #B48EAD">6</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> policy </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBookPolicy</span><span style="color: #ECEFF4">()</span></span>
<span class="line"><span style="color: #D8DEE9FF">        book</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">borrowBook</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">readerId</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> today</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> policy</span><span style="color: #ECEFF4">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> event </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> book</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">getChanges</span><span style="color: #ECEFF4">().</span><span style="color: #D8DEE9FF">last</span><span style="color: #ECEFF4">()</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #8FBCBB">Assertions</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">assertTrue</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">event </span><span style="color: #81A1C1">is</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookBorrowed</span><span style="color: #ECEFF4">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> bookBorrowed </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> event </span><span style="color: #81A1C1">as</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookBorrowed</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #8FBCBB">Assertions</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">assertEquals</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">bookId</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> bookBorrowed</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">bookId</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #8FBCBB">Assertions</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">assertEquals</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">readerId</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> bookBorrowed</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">readerId</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #8FBCBB">Assertions</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">assertEquals</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">today</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> bookBorrowed</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">loanDate</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #8FBCBB">Assertions</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">assertEquals</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">endDate</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> bookBorrowed</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">loanEndDate</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #ECEFF4">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ECEFF4">}</span></span></code></pre></div>



<p>For the full implementation of the book aggregate, see my <a href="https://github.com/DomenicDev/personal-blog-examples/blob/main/simple-library/domain/src/main/kotlin/com/cassisi/book/BookAggregate.kt">GitHub repository</a>.</p>



<h2>The Use Cases Layer</h2>



<p>The next layer we will look into is the use cases layer, which contains application-specific software. This layer controls the flow of aggregates, including storing and retrieving aggregates to and from the event store, respectively. I prefer to organize code in this layer by feature. Each feature or use case is contained within a corresponding package, as illustrated in the following figure.</p>



<figure class="wp-block-image aligncenter size-full"><img decoding="async" width="324" height="262" src="/wp-content/uploads/2022/09/package.jpg" alt="" class="wp-image-242" srcset="/wp-content/uploads/2022/09/package.jpg 324w, /wp-content/uploads/2022/09/package-300x243.jpg 300w" sizes="(max-width: 324px) 100vw, 324px" /><figcaption>The package structure in the use case layer</figcaption></figure>



<p>For each use case, there is a contract that can be invoked by the next outer layer. Organizing code this way respects the Single Responsibility Principle (SRP), so each class or interface has only one reason to change, which is a change of the according use case itself.</p>



<p>For example, the contract of the <em>borrow book</em> use case looks as follows:</p>



<div class="wp-block-kevinbatdorf-code-block-pro" style="font-size:1rem;line-height:1.25rem"><span style="display:block;padding:16px 0 0 16px;margin-bottom:-1px;width:100%;text-align:left;background-color:#2e3440ff"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></span><span role="button" tabindex="0" data-code="sealed interface BorrowBook {

    fun execute(command: BorrowBookCommand): Result<Unit&gt;

}

data class BorrowBookCommand(
    val bookId: BookId,
    val readerId: ReaderId,
    val loanAt: LocalDate
)" style="color:#d8dee9ff;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki" style="background-color: #2e3440ff"><code><span class="line"><span style="color: #81A1C1">sealed</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">interface</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBook</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">execute</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9">command</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBookCommand</span><span style="color: #ECEFF4">)</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Result</span><span style="color: #81A1C1">&lt;</span><span style="color: #8FBCBB">Unit</span><span style="color: #81A1C1">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ECEFF4">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #81A1C1">data</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">class</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBookCommand</span><span style="color: #ECEFF4">(</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">bookId</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">readerId</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">ReaderId</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">loanAt</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">LocalDate</span></span>
<span class="line"><span style="color: #ECEFF4">)</span></span></code></pre></div>



<p>Similar to our domain model, we also return a result object indicating the outcome of the use case execution. There is no need for components which invoke that use case to know details on the implementation. The use case&#8217;s implementation is shown in the following code snippet:</p>



<div class="wp-block-kevinbatdorf-code-block-pro" style="font-size:1rem;line-height:1.25rem"><span style="display:block;padding:16px 0 0 16px;margin-bottom:-1px;width:100%;text-align:left;background-color:#2e3440ff"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></span><span role="button" tabindex="0" data-code="class BorrowBookExecutor(
    private val repository: BorrowBookRepository,
    private val policy: BorrowBookPolicy
) : BorrowBook {

    override fun execute(command: BorrowBookCommand): Result<Unit&gt; {
        // load book aggregate from repository
        val book = repository.get(command.bookId)
        
        // try to borrow book
        val result = book.borrowBook(command.readerId, command.loanAt, policy)
        
        return result.fold(
            {
                // on success
                repository.save(it)
                Result.success(Unit)
            }, 
            {
                // on failure
                Result.failure(it)
            }
        )
    }

}" style="color:#d8dee9ff;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki" style="background-color: #2e3440ff"><code><span class="line"><span style="color: #81A1C1">class</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBookExecutor</span><span style="color: #ECEFF4">(</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">private</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">repository</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBookRepository</span><span style="color: #ECEFF4">,</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">private</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> </span><span style="color: #D8DEE9">policy</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBookPolicy</span></span>
<span class="line"><span style="color: #ECEFF4">)</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB; font-style: italic">BorrowBook</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">override</span><span style="color: #D8DEE9FF"> </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">execute</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9">command</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBookCommand</span><span style="color: #ECEFF4">)</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Result</span><span style="color: #81A1C1">&lt;</span><span style="color: #8FBCBB">Unit</span><span style="color: #81A1C1">&gt;</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #616E88">// load book aggregate from repository</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> book </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> repository</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">get</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">command</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">bookId</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #616E88">// try to borrow book</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">val</span><span style="color: #D8DEE9FF"> result </span><span style="color: #81A1C1">=</span><span style="color: #D8DEE9FF"> book</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">borrowBook</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">command</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">readerId</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> command</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">loanAt</span><span style="color: #ECEFF4">,</span><span style="color: #D8DEE9FF"> policy</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #81A1C1">return</span><span style="color: #D8DEE9FF"> result</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">fold</span><span style="color: #ECEFF4">(</span></span>
<span class="line"><span style="color: #D8DEE9FF">            </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">                </span><span style="color: #616E88">// on success</span></span>
<span class="line"><span style="color: #D8DEE9FF">                repository</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">save</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">it</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">                </span><span style="color: #8FBCBB">Result</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">success</span><span style="color: #ECEFF4">(</span><span style="color: #8FBCBB">Unit</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">            </span><span style="color: #ECEFF4">},</span><span style="color: #D8DEE9FF"> </span></span>
<span class="line"><span style="color: #D8DEE9FF">            </span><span style="color: #ECEFF4">{</span></span>
<span class="line"><span style="color: #D8DEE9FF">                </span><span style="color: #616E88">// on failure</span></span>
<span class="line"><span style="color: #D8DEE9FF">                </span><span style="color: #8FBCBB">Result</span><span style="color: #ECEFF4">.</span><span style="color: #D8DEE9FF">failure</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9FF">it</span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">            </span><span style="color: #ECEFF4">}</span></span>
<span class="line"><span style="color: #D8DEE9FF">        </span><span style="color: #ECEFF4">)</span></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #ECEFF4">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ECEFF4">}</span></span></code></pre></div>



<p>First, the according book aggregate is loaded from the repository, which is passed as a constructor argument. Second, the <code>borrowBook </code>method of that book is called passing the data of the specified command. When the execution of the command was successful, we store changes of that aggregate in the event store. In case of a validation error, we return a failed result object and pass the business exception. Alternatively, we could map the business exception to a more &#8220;generic&#8221; or application-specific exception containing an error code.</p>



<p>I prefer to build a separate repository interface for each use case in order to reduce coupling points. Furthermore, those repository interfaces are not very complex, as shown in the following code snippet. The implementation can still use generic base classes in the infrastructure layer to avoid redundant code if desired.</p>



<div class="wp-block-kevinbatdorf-code-block-pro" style="font-size:1rem;line-height:1.25rem"><span style="display:block;padding:16px 0 0 16px;margin-bottom:-1px;width:100%;text-align:left;background-color:#2e3440ff"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></span><span role="button" tabindex="0" data-code="interface BorrowBookRepository {

    fun get(bookId: BookId): Book

    fun save(book: Book)

}" style="color:#d8dee9ff;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki" style="background-color: #2e3440ff"><code><span class="line"><span style="color: #81A1C1">interface</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BorrowBookRepository</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">get</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9">bookId</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">BookId</span><span style="color: #ECEFF4">)</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Book</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">    </span><span style="color: #81A1C1">fun</span><span style="color: #D8DEE9FF"> </span><span style="color: #88C0D0">save</span><span style="color: #ECEFF4">(</span><span style="color: #D8DEE9">book</span><span style="color: #81A1C1">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #8FBCBB">Book</span><span style="color: #ECEFF4">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ECEFF4">}</span></span></code></pre></div>



<h2>Infrastructure and additional notes</h2>



<p>Since the focus of this blog is on the domain and application layer, we won&#8217;t go into detail about the infrastructure layer. All infrastructure concerns are outsourced to the infrastructure layer. This is the layer where we would implement the logic for storing events in an event store such as EventStoreDB. This is also the layer where we would invoke the use cases layer from different entry points, for example, an HTTP endpoint, a GUI, or a console, and present results to the user.</p>



<h3>Where do you do null checks and the like?</h3>



<p>As the use cases layer as well as the domain layer uses domain-specific types that already ensure &#8220;valid&#8221; data, validations like null checks, empty strings, and the like are up to the infrastructure layer.  The infrastructure layer converts data from the form most convenient for the infrastructure layer (e.g. a JSON data transfer object) to the form most convenient for the use cases (and domain) layer. In my opinion, it makes sense to avoid polluting the domain with those &#8220;annoying&#8221; validations and allow focusing on core domain logic instead.</p>



<h3>Is the presented approach appropriate for every use case?</h3>



<p>Obviously not. Combining Event Sourcing, DDD, and Clean Architecture is neither necessary nor reasonable for all use cases. Simpler subdomains with less complex logic might profit from a more straightforward approach, such as the Transaction Script pattern. </p>



<h2>Outlook</h2>



<p>Thanks for reading this post. I hope it gave you some insights on how to build an event-sourced domain model.</p>



<p>Although very popular, the tactical patterns from DDD (aggregates, value objects, entities, &#8230;) are just one way to build an event-sourced domain model. In the next post, I would like to present an alternative approach that I find worth considering when building an event-sourced domain model. Stay tuned and see you in the next one. </p>



<p> </p>



<p>Photo by <a href="https://unsplash.com/@hasanalmasi?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Hasan Almasi</a> on <a href="https://unsplash.com/s/photos/layer?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></p>
<p>The post <a rel="nofollow" href="/2022/09/25/how-to-build-an-event-sourced-domain-model-a-practical-introduction/">How to Build an Event-Sourced Domain Model &#8211; A Practical Introduction</a> appeared first on <a rel="nofollow" href="/">Domenic Cassisi</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Event Sourcing, CQRS, DDD, and event-driven microservices. What did I learn from my master&#8217;s thesis?</title>
		<link>/2022/09/18/event-sourcing-cqrs-ddd-and-event-driven-microservices-what-did-i-learn-from-my-masters-thesis/</link>
		
		<dc:creator><![CDATA[Domenic Cassisi]]></dc:creator>
		<pubDate>Sun, 18 Sep 2022 19:04:02 +0000</pubDate>
				<category><![CDATA[Domain-Driven Design]]></category>
		<category><![CDATA[Event Sourcing]]></category>
		<guid isPermaLink="false">/?p=167</guid>

					<description><![CDATA[<p>From the beginning of March to the end of August 2022, I wrote my master&#8217;s thesis in the field of software architecture. The complete title of my thesis is as follows: Event Sourcing, CQRS, and Domain-Driven Design, and Their Application to Event-Driven Microservices The title on its own involves quite a number of concepts already. [&#8230;]</p>
<p>The post <a rel="nofollow" href="/2022/09/18/event-sourcing-cqrs-ddd-and-event-driven-microservices-what-did-i-learn-from-my-masters-thesis/">Event Sourcing, CQRS, DDD, and event-driven microservices. What did I learn from my master&#8217;s thesis?</a> appeared first on <a rel="nofollow" href="/">Domenic Cassisi</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>From the beginning of March to the end of August 2022, I wrote my master&#8217;s thesis in the field of software architecture. The complete title of my thesis is as follows:</p>



<p><em>Event Sourcing, CQRS, and Domain-Driven Design, and Their Application to Event-Driven Microservices</em></p>



<p>The title on its own involves quite a number of concepts already. There is no chance to cover all of them in extensive detail in this blog post. Rather, I would like to share some of my findings and things I learned during writing my thesis. For this reason, the present post requires a basic understanding of the concepts discussed. Some sections refer to a proof of concept, which is an event-driven library application, that I developed as part of my thesis.</p>



<h2>Does combining event sourcing, CQRS, and DDD make sense?</h2>



<p>Foremost,  I find it astonishing how well event sourcing, CQRS, and domain-driven design (DDD) complement each other. Although all concepts are fundamentally different and have totally different purposes, they work very well in conjunction. But why is that? Well, I came up with several reasons that I want to describe briefly in the following:</p>



<p>First, CQRS is a natural consequence of event sourcing. According to Greg Young (who coined the notion of event sourcing and CQRS), CQRS was always intended to be a stepping stone toward the idea of event sourcing. Although CQRS can be applied without event sourcing, it actually originates from the event sourcing concept. </p>



<p>Second, all concepts focus on behavior and business capabilities rather than on storing state or other technical aspects. DDD focuses on the domain, its natural boundaries, language, and behavior. <em>Everything </em>within that domain is made explicit, for example by defining bounded contexts and domain events. We can store those domain events in a proper event store and build the complete application state from our events. As event sourcing is not (always) appropriate for queries, we can apply the CQRS principle and implement read models better suited for the execution of queries.</p>



<p>Third, all concepts are pretty straightforward to apply, however, they come with a steep learning curve. It took me a while to <em>actually</em> understand these concepts and answer very detailed questions, but I think it is worth it. Event sourcing and CQRS are gaining popularity. DDD seems to be well established in many industries and software companies. </p>



<p>To provide a short answer to the question above: Yes, the combination of event sourcing, CQRS, and DDD makes sense when we want to make things explicit in a domain or some part of it.</p>



<h2>How do these concepts apply to event-driven microservices?</h2>



<p>Microservices are rooted in the ideas of domain-driven design, especially in the notion of a bounded context. In my research, I found that every microservice is a bounded context, but not every bounded context is a microservice. Aligning microservices with subdomains seems to be a safe heuristic. Subdomains can be identified as part of the strategic design principles of DDD. I could successfully apply this approach in my proof of concept, where I was able to do a one-to-one mapping of subdomain and (event-driven) microservice.</p>



<p>Not every microservice is an event-driven microservice. An event-driven microservice shares many characteristics of the traditional microservices architecture style, though. Event-driven microservices should be autonomous and asynchronously communicate with other services through events. </p>



<p>The inter-service communication aspect is exactly where event sourcing can be handy. Since events are already modeled as domain events within a service boundary, it is more straightforward to use those domain events to communicate with other services. However, usually, we don&#8217;t want to use internal domain events to communicate with other services, because domain events leak data that might not be understood by other services. Furthermore, it might hurt the services&#8217; autonomy. Instead, we &#8220;transform&#8221; those events into some kind of <em>thin events</em>. By the way, EventStorming can help with identifying those special events, which in this context are referred to as Pivotal Events. </p>



<p>I had the privilege to talk with Mauro Servienti, a highly experienced solution architect, and he stated that the highest degree of autonomy can be achieved by following a share-nothing policy. Sharing data should be limited to very stable data, such as identifiers. In my proof of concept, all events that are used to communicate between service boundaries consist of identifiers only. As identifiers are not expected to change, we can consider them stable. A thin event that notifies other service boundaries about a student that was matriculated could look as follows:</p>



<div class="wp-block-kevinbatdorf-code-block-pro" style="font-size:1.1rem;line-height:1.25rem"><span role="button" tabindex="0" data-code="student matriculated event:
{

  &quot;studentId&quot;: &quot;01e2c0c8-d4f5-43af-a9b4-6d8c12933203&quot;
  
}" style="color:#d8dee9ff;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki" style="background-color: #2e3440ff"><code><span class="line"><span style="color: #D8DEE9FF">student matriculated event:</span></span>
<span class="line"><span style="color: #ECEFF4">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D8DEE9FF">  </span><span style="color: #ECEFF4">&quot;</span><span style="color: #8FBCBB">studentId</span><span style="color: #ECEFF4">&quot;</span><span style="color: #ECEFF4">:</span><span style="color: #D8DEE9FF"> </span><span style="color: #ECEFF4">&quot;</span><span style="color: #A3BE8C">01e2c0c8-d4f5-43af-a9b4-6d8c12933203</span><span style="color: #ECEFF4">&quot;</span></span>
<span class="line"><span style="color: #D8DEE9FF">  </span></span>
<span class="line"><span style="color: #ECEFF4">}</span></span></code></pre></div>



<h2>Are these concepts in combination a silver bullet?</h2>



<p>As with everything in software architecture, all concepts come with benefits and shortcomings. This also applies to the combination of event sourcing, CQRS, DDD, and event-driven microservices. Especially when working on my proof of concept, I realized that the concepts&#8217; combination might not always be beneficial. Even though they come with a great amount of flexibility and great scalability options, applying event sourcing and CQRS to event-driven microservices increases the system&#8217;s complexity a lot. Remember that for every event-sourced microservice, you need to maintain one event store instance, at least one projection, and at least one read model. Each contributes to the overall complexity of the system and represents moving pieces within the architecture. Although these building blocks are usually not very complex, their impact must still be taken into consideration when designing a solution architecture, in my opinion. In the case of my proof of concept, at least one of my four service boundaries could be implemented without event sourcing and CQRS, as it mainly represented traditional CRUD behavior.</p>



<p>In conclusion, I found that the strategic design principles of DDD can be applied to the complete solution architecture, but we want to be a bit more careful when it comes to event sourcing and CQRS. Event sourcing might not be appropriate when there is not much behavior in the domain/subdomain. CQRS might not be necessary if there is just one view of the data within a domain, or if scaling the command and query side independently is not essential. </p>



<h2>My takeaways</h2>



<p>The following list shows some of the results and personal findings that I find worth mentioning when it comes to what I have learned from my master&#8217;s thesis:</p>



<ul><li>Focus on business capabilities, not entity services.</li><li>Don&#8217;t think of microservices, but rather in service boundaries.</li><li>There are problems that are not technical, even if they look alike.</li><li>Concentrate on what&#8217;s really important from a business perspective.</li><li>Dive deep into how the domain works, which helps to handle special cases and race conditions.</li><li>&#8230;</li></ul>



<p>This short post just covered some aspects of my thesis, in fact, it touched on many more interesting areas, which cannot be part of this very first blog post. Some of the concepts discussed in this post will probably be covered in future posts. I am looking forward to writing about more specific aspects and approaches in future blog posts, and highly appreciate it if you check them out as well. </p>



<p>Thanks!</p>
<p>The post <a rel="nofollow" href="/2022/09/18/event-sourcing-cqrs-ddd-and-event-driven-microservices-what-did-i-learn-from-my-masters-thesis/">Event Sourcing, CQRS, DDD, and event-driven microservices. What did I learn from my master&#8217;s thesis?</a> appeared first on <a rel="nofollow" href="/">Domenic Cassisi</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
